// ----------------------------------------
// 
// TagsLayersScenesBuilder.cs by Frédéric Cornélis
// 
// ©2021 - TeCum Studio. All rights reserved.
// 
// Created:  17/10/2021 - 12:17
// Modified: 17/10/2021 - 15:19
// 
// ----------------------------------------

using System.IO;
using System.Linq;
using UnityEditor;
using UnityEditorInternal;
using UnityEngine;
using static UnityEditor.AssetDatabase;

namespace TeCumStudio.Tools
{
	public static class TagsLayersScenesBuilder
	{
		private const string _FOLDER_LOCATION = "_Project/Scripts/AutoGenerated/";
		private const string _TAGS_FILE_NAME = "Tags";
		private const string _LAYERS_FILE_NAME = "Layers";
		private const string _SCENES_FILE_NAME = "Scenes";
		private const string _SCRIPT_EXTENSION = ".cs";


		public static void RebuildTagsAndLayersClasses ()
		{
			string folderPath = Application.dataPath + "/" + _FOLDER_LOCATION;

			if (!Directory.Exists(folderPath))
			{
				Directory.CreateDirectory(folderPath);
			}

			File.WriteAllText(folderPath + _TAGS_FILE_NAME + _SCRIPT_EXTENSION,
				GetClassContent(_TAGS_FILE_NAME, InternalEditorUtility.tags));

			File.WriteAllText(folderPath + _LAYERS_FILE_NAME + _SCRIPT_EXTENSION,
				GetLayerClassContent(_LAYERS_FILE_NAME, InternalEditorUtility.layers));

			File.WriteAllText(folderPath + _SCENES_FILE_NAME + _SCRIPT_EXTENSION,
				GetClassContent(_SCENES_FILE_NAME, EditorBuildSettingsScenesToNameStrings(EditorBuildSettings.scenes)));

			ImportAsset("Assets/" + _FOLDER_LOCATION + _TAGS_FILE_NAME + _SCRIPT_EXTENSION, ImportAssetOptions.ForceUpdate);
			ImportAsset("Assets/" + _FOLDER_LOCATION + _LAYERS_FILE_NAME + _SCRIPT_EXTENSION, ImportAssetOptions.ForceUpdate);
			ImportAsset("Assets/" + _FOLDER_LOCATION + _SCENES_FILE_NAME + _SCRIPT_EXTENSION, ImportAssetOptions.ForceUpdate);

			Debug.Log("Rebuild Complete");
		}


		private static string[] EditorBuildSettingsScenesToNameStrings (EditorBuildSettingsScene[] scenes)
		{
			string[] sceneNames = new string[scenes.Length];

			for (int n = 0; n < sceneNames.Length; n++)
			{
				sceneNames[n] = Path.GetFileNameWithoutExtension(scenes[n].path);
			}

			return sceneNames;
		}


		private static string GetClassContent (string className, string[] labelsArray)
		{
			string output = "";
			output += "// This class is auto-generated do not modify (TagsLayersScenesBuilder.cs)\n";
			output += "public class " + className + "\n";
			output += "{\n";

			output = labelsArray.Aggregate(output, (current, label) => current + "\t" + BuildConstVariable(label) + "\n");

			if (className == _SCENES_FILE_NAME)
			{
				output += "\n";

				for (int i = 0; i < labelsArray.Length; i++)
				{
					output += "\t" + "public const int " + ToUpperCaseWithUnderscores(labelsArray[i]) + "_BUILT_INDEX" +
							  " = " + i + ";\n";
				}
			}

			output += "}\n";

			return output;
		}


		private static string GetLayerClassContent (string className, string[] labelsArray)
		{
			string output = "";
			output += "// This class is auto-generated do not modify (TagsLayersScenesBuilder.cs)\n";
			output += "public class " + className + "\n";
			output += "{\n";

			output = labelsArray.Aggregate(output, (current, label) => current + "\t" + BuildConstVariable(label) + "\n");

			output += "\n";

			output = labelsArray.Aggregate(output, (current, label) =>
				current + "\t" + "public const int " + ToUpperCaseWithUnderscores(label) + "_INT" +
				" = " + LayerMask.NameToLayer(label) + ";\n");

			output += "}\n";

			return output;
		}


		private static string BuildConstVariable (string varName)
		{
			return "public const string " + ToUpperCaseWithUnderscores(varName) + " = " + '"' + varName + '"' + ";";
		}


		private static string ToUpperCaseWithUnderscores (string input)
		{
			string output = "" + input[0];

			for (int n = 1; n < input.Length; n++)
			{
				if ((char.IsUpper(input[n]) || input[n] == ' ') && !char.IsUpper(input[n - 1]) && input[n - 1] != '_' &&
					input[n - 1] != ' ')
				{
					output += "_";
				}

				if (input[n] != ' ' && input[n] != '_')
				{
					output += input[n];
				}
			}

			output = output.ToUpper();

			return output;
		}
	}
}
